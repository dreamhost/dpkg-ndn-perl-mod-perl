Description: Fix spelling errors in documentation
 This includes both POD and comments.
 The 'overriden -> overridden' fix may also be applied to variable names,
 but is not done with this patch.
Forwarded: http://mail-archives.apache.org/mod_mbox/perl-modperl/201004.mbox/thread
Author: Damyan Ivanov <dmn@debian.org>
Last-Update: 2011-03-22
Reviewed-by: Nicholas Bamber <nicholas@periapt.co.uk>

--- a/Apache-Test/lib/Apache/TestTrace.pm
+++ b/Apache-Test/lib/Apache/TestTrace.pm
@@ -126,9 +126,9 @@
 }
 
 sub trace_level {
-    # overriden by user/-trace
+    # overridden by user/-trace
     (defined $Level && $levels{$Level}) ||
-    # or overriden by env var
+    # or overridden by env var
     (exists $ENV{APACHE_TEST_TRACE_LEVEL} &&
         $levels{$ENV{APACHE_TEST_TRACE_LEVEL}}) ||
     # or default
--- a/Apache-Test/lib/Apache/TestUtil.pm
+++ b/Apache-Test/lib/Apache/TestUtil.pm
@@ -859,7 +859,7 @@
 =item t_start_error_log_watch(), t_finish_error_log_watch()
 
 This pair of functions provides an easy interface for checking
-the presence or absense of any particular message or messages
+the presence or absence of any particular message or messages
 in the httpd error_log that were generated by the httpd daemon
 as part of a test suite.  It is likely, that you should proceed
 this with a call to one of the t_*_is_expected() functions.
--- a/ModPerl-Registry/lib/ModPerl/RegistryCooker.pm
+++ b/ModPerl-Registry/lib/ModPerl/RegistryCooker.pm
@@ -61,7 +61,7 @@
 use constant D_COMPILE => 4;
 use constant D_NOISE   => 8;
 
-# the debug level can be overriden on the main server level of
+# the debug level can be overridden on the main server level of
 # httpd.conf with:
 #   PerlSetVar ModPerl::RegistryCooker::DEBUG 4
 use constant DEBUG => 0;
--- a/docs/api/APR.pod
+++ b/docs/api/APR.pod
@@ -18,7 +18,7 @@
 
 =head1 Description
 
-On load this modules prepares the APR enviroment (initializes memory
+On load this modules prepares the APR environment (initializes memory
 pools, data structures, etc.)
 
 You don't need to use this module explicitly, since it's already
--- a/docs/api/Apache2/Module.pod
+++ b/docs/api/Apache2/Module.pod
@@ -413,7 +413,7 @@
 
 =head2 C<top_module>
 
-Returns the first module in the module list. Usefull to start a
+Returns the first module in the module list. Useful to start a
 module iteration.
 
   $module = Apache2::Module::top_module();
--- a/docs/api/Apache2/Util.pod
+++ b/docs/api/Apache2/Util.pod
@@ -36,7 +36,7 @@
 
 =head2 C<escape_path>
 
-convert an OS path to a URL in an OS dependant way.
+convert an OS path to a URL in an OS dependent way.
 
   $escaped_path = Apache2::Util::escape_path($path, $p);
   $escaped_path = Apache2::Util::escape_path($path, $p, $partial);
--- a/docs/api/ModPerl/MM.pod
+++ b/docs/api/ModPerl/MM.pod
@@ -55,7 +55,7 @@
 C<ModPerl::MM> will DWIM and do nothing.
 
 In case the functionality of C<ModPerl::MM> methods needs to be
-extended, rather than completely overriden, the C<ModPerl::MM> methods
+extended, rather than completely overridden, the C<ModPerl::MM> methods
 can be called internally. For example if you need to modify constants
 in addition to the modifications applied by
 C<ModPerl::MM::MY::constants>, call the C<ModPerl::MM::MY::constants>
@@ -72,7 +72,7 @@
 In certain cases a developers may want to prevent from C<ModPerl::MM>
 to override certain methods. In that case an explicit override in
 I<Makefile.PL> will do the job. For example if you don't want the
-C<constants()> method to be overriden by C<ModPerl::MM>, add to your
+C<constants()> method to be overridden by C<ModPerl::MM>, add to your
 I<Makefile.PL>:
 
   sub MY::constants { shift->MM::constants(@_); }";
@@ -89,7 +89,7 @@
 C<INC> and C<TYPEMAPS> unless they weren't passed to
 C<ModPerl::MM::WriteMakefile> from I<Makefile.PL>.
 
-If the default values aren't satisfying these should be overriden in
+If the default values aren't satisfying these should be overridden in
 I<Makefile.PL>. For example to supply an empty INC, explicitly set the
 argument in I<Makefile.PL>.
 
--- a/docs/api/ModPerl/RegistryCooker.pod
+++ b/docs/api/ModPerl/RegistryCooker.pod
@@ -25,7 +25,7 @@
 
 =item *
 
-Provide a default behavior, which can be overriden in sub-classed
+Provide a default behavior, which can be overridden in sub-classed
 
 META: in the future this functionality may move into a separate class.
 
--- a/lib/Apache2/compat.pm
+++ b/lib/Apache2/compat.pm
@@ -254,7 +254,7 @@
 }
 
 # restore_mp2_api does the opposite of override_mp2_api(), it removes
-# the overriden API and restores the original mod_perl 2.0 API
+# the overridden API and restores the original mod_perl 2.0 API
 sub restore_mp2_api {
     my (@subs) = @_;
 
--- a/lib/Apache2/porting.pm
+++ b/lib/Apache2/porting.pm
@@ -84,9 +84,9 @@
         $package =~ s|/|::|g;
         $package =~ s|.pm$||;
 
-        # this picks the original require (which could be overriden
+        # this picks the original require (which could be overridden
         # elsewhere, so we don't lose that) because we haven't
-        # overriden it yet
+        # overridden it yet
         return require $_[0] unless $packages{$package};
 
         my $msg = "mod_perl 2.0 API doesn't include package '$package'.";
--- a/xs/APR/Pool/APR__Pool.h
+++ b/xs/APR/Pool/APR__Pool.h
@@ -49,7 +49,7 @@
 #define MP_APR_POOL_SV_HAS_OWNERSHIP(sv) mpxs_pool_is_custom(sv)
 
 /* before the magic is freed, one needs to carefully detach the
- * dependant pool magic added by mpxs_add_pool_magic (most of the time
+ * dependent pool magic added by mpxs_add_pool_magic (most of the time
  * it'd be a parent pool), and postpone its destruction, until after
  * the child pool is destroyed. Since if we don't do that the
  * destruction of the parent pool will destroy the child pool C guts
--- a/todo/bugs_build
+++ b/todo/bugs_build
@@ -71,7 +71,7 @@
 
 * we have a dependency check problem when xs/*/*.h use code from
   xs/modperl_xs*.h, when the latter change 'make' won't rebuild the
-  dependant files
+  dependent files
 
 * Testing:
   Need to put Philippe's smoking test into the core
--- a/Apache-Reload/lib/Apache2/Reload.pm
+++ b/Apache-Reload/lib/Apache2/Reload.pm
@@ -360,7 +360,7 @@
 
 =head2 Unregistering a module
 
-In some cases, it might be necessary to explicitely stop reloading
+In some cases, it might be necessary to explicitly stop reloading
 a module.
 
   Apache2::Reload->unregister_module('Some::Module');
--- a/docs/api/Apache2/RequestUtil.pod
+++ b/docs/api/Apache2/RequestUtil.pod
@@ -813,7 +813,7 @@
 same code is called in a sub-request then the pnote of $r->prev is magically 
 updated at a distance to the same value!
 
-Try explain why that is to anyone not deeply familar with perl internals!
+Try explain why that is to anyone not deeply familiar with perl internals!
 
 The fix is to avoid pnotes taking a ref to the invisible op_targ embededed in 
 the code by passing a simple lexical variable as the actual argument. That can be done in-line like this:
